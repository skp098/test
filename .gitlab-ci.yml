stages:
  - build
  - deploy

variables:
  CI_MERGE_REQUEST_ID_STR: mr-$CI_MERGE_REQUEST_ID

  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$CI_PIPELINE_ID
  IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  REGISTRY: gitlab-registry-$CI_PROJECT_NAME

  AGENT: objective-earth/objective-earth-wiki
  CONTEXT_DEV: $AGENT:dev-agent
  CONTEXT_PROD: $AGENT:prod-agent

  MEDIAWIKI_DB_TYPE: mysql
  MEDIAWIKI_DB_HOST: mysqldb
  MEDIAWIKI_DB_USER: root
  MEDIAWIKI_DB_NAME: oearth

  MAIN_GKEY: 6LePJ8kiAAAAAFE_q8ras0ljCFxpwwUy_l4R84Z2
  MAIN_GSECRET: 6LePJ8kiAAAAANe82zeJgpRNEO6bW1epc4mLCzwk

  DEVELOP_GKEY: 6Le06ckiAAAAAJJ8pic2S5hPtqvpx8BhC6xSq17x
  DEVELOP_GSECRET: 6Le06ckiAAAAAAgD4358sqkXE3C1V1r7FtY_1lW-

  HOST_TEST: $CI_MERGE_REQUEST_ID_STR.oe-test.smarter.codes
  HOST_STAGING: oe-staging.smarter.codes
  HOST_PROD: www.objective.earth

setup-test:
  stage: .pre
  script:
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - tar -zcvf extensions.tar.gz extensions
  artifacts:
    paths:
      - extensions.tar.gz
    expire_in: 1 hour
  only:
    - merge_requests

setup-staging:
  stage: .pre
  script:
    - sed -i 's|= main|= develop|g' .gitmodules
    - sed -i 's/MAIN_GKEY/DEVELOP_GKEY/g' kube-deployment-mediawiki.yml
    - sed -i 's/MAIN_GSECRET/DEVELOP_GSECRET/g' kube-deployment-mediawiki.yml
    - git submodule sync --recursive
    - git submodule update --init --remote --recursive
    - tar -zcvf extensions.tar.gz extensions
  artifacts:
    paths:
      - extensions.tar.gz
    expire_in: 1 hour
  only:
    - develop

setup-prod:
  stage: .pre
  script:
    - git submodule sync --recursive
    - sed -i 's/MAIN_GKEY/MAIN_GKEY/g' kube-deployment-mediawiki.yml
    - sed -i 's/MAIN_GSECRET/MAIN_GSECRET/g' kube-deployment-mediawiki.yml    
    - git submodule update --init --remote --recursive
    - tar -zcvf extensions.tar.gz extensions
  artifacts:
    paths:
      - extensions.tar.gz
    expire_in: 1 hour
  only:
    - main

build:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  script:
    - tar -xvf extensions.tar.gz
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG_LATEST || echo "image for cache not found"
    - docker build --cache-from=$IMAGE_TAG_LATEST -t $IMAGE_TAG_LATEST -t $IMAGE_TAG .
    - docker push $IMAGE_TAG_LATEST
    - docker push $IMAGE_TAG
  only:
    - main
    - develop
    - merge_requests

.deploy-conf:
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  stage: deploy
  script:
    - kubectl config get-contexts
    - kubectl config use-context $CONTEXT
    - >-
      kubectl create namespace $NAMESPACE
      -o yaml --dry-run=client | kubectl apply -f -
    - >-
      head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | xargs -I {}
      kubectl create --namespace=$NAMESPACE
      secret generic mysqlauth
      --from-literal=rootUser=root
      --from-literal=rootHost=%
      --from-literal=rootPassword={} || :
    - >-
      head /dev/urandom | tr -dc A-Za-z0-9 | head -c 24 | xargs -I {}
      kubectl create --namespace=$NAMESPACE
      secret generic mywikiauth
      --from-literal=adminPassword={} || :
    - >-
      sed -i
      -e 's|$MEDIAWIKI_DB_HOST|'"$MEDIAWIKI_DB_HOST"'|'
      -e 's|$INSTANCES|'"$INSTANCES"'|'
      kube-deployment-mysql.yml
    - kubectl apply --namespace=$NAMESPACE -f kube-deployment-mysql.yml
    - >-
      kubectl create secret
      docker-registry $REGISTRY
      --namespace $NAMESPACE
      --docker-server="$CI_REGISTRY"
      --docker-username="$CI_DEPLOY_USER"
      --docker-password="$CI_DEPLOY_PASSWORD"
      --docker-email="$GITLAB_USER_EMAIL"
      -o yaml --dry-run=client | kubectl apply -f -
    - >-
      sed -i 
      -e 's|$IMAGE_TAG|'"$IMAGE_TAG"'|'
      -e 's|$APP|'"$CI_PROJECT_NAME"'|'
      -e 's|$REGISTRY|'"$REGISTRY"'|'
      -e 's|$URL|'"$URL"'|'
      -e 's|$WG_SERVER|'"https://$URL"'|'
      -e 's|$MEDIAWIKI_DB_TYPE|'"$MEDIAWIKI_DB_TYPE"'|'
      -e 's|$MEDIAWIKI_DB_HOST|'"$MEDIAWIKI_DB_HOST"'|'
      -e 's|$MEDIAWIKI_DB_USER|'"$MEDIAWIKI_DB_USER"'|'
      -e 's|$MEDIAWIKI_DB_NAME|'"$MEDIAWIKI_DB_NAME"'|'
      -e 's|$PORT|'"80"'|'
      kube-deployment-mediawiki.yml
    - kubectl apply --namespace=$NAMESPACE -f kube-deployment-mediawiki.yml

deploy-test:
  variables:
    CONTEXT: $CONTEXT_DEV
    NAMESPACE: $CI_MERGE_REQUEST_ID_STR
    INSTANCES: 1
    URL: $HOST_TEST
  environment:
    name: testing/$CI_PROJECT_NAME-$CI_MERGE_REQUEST_ID_STR
    url: https://$HOST_TEST
    on_stop: teardown-mr
  extends:
    - .deploy-conf
  resource_group: deploy-test
  only:
    - merge_requests

deploy-staging:
  variables:
    CONTEXT: $CONTEXT_DEV
    NAMESPACE: $CI_COMMIT_BRANCH
    INSTANCES: 1
    URL: $HOST_STAGING
  environment:
    name: staging/$CI_PROJECT_NAME-$CI_COMMIT_BRANCH
    url: https://$HOST_STAGING
  extends:
    - .deploy-conf
  resource_group: deploy-staging
  only:
    - develop

deploy-prod:
  variables:
    CONTEXT: $CONTEXT_PROD
    NAMESPACE: $CI_COMMIT_BRANCH
    INSTANCES: 1
    URL: $HOST_PROD
  environment:
    name: production/$CI_PROJECT_NAME-$CI_COMMIT_BRANCH
    url: https://$HOST_PROD
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive --remote
  extends:
    - .deploy-conf
  resource_group: deploy-prod
  only:
    - main

teardown-mr:
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  stage: deploy
  environment:
    name: testing/$CI_PROJECT_NAME-$CI_MERGE_REQUEST_ID_STR
    action: stop
  script:
    - kubectl config get-contexts
    - kubectl config use-context $CONTEXT_DEV
    - >-
      sed -i
      -e 's|$MEDIAWIKI_DB_HOST|'"$MEDIAWIKI_DB_HOST"'|'
      kube-deployment-mysql.yml
    - >-
      kubectl delete --namespace=$CI_MERGE_REQUEST_ID_STR 
      -f kube-deployment-mysql.yml || :
    - kubectl delete namespace $CI_MERGE_REQUEST_ID_STR
  when: manual
  only:
    - merge_requests
